name: Release
on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.create-github-release.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          version=$(.github/scripts/get-version.sh)
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Generate release notes
        run: |
          # the complex perl regex is needed because markdown docs render newlines as soft wraps
          # while release notes render them as line breaks
          sed -n "0,/^## Version $VERSION /d;/^## Version /q;p" CHANGELOG.md \
            | perl -0pe 's/(?<!\n)\n *(?!\n)(?![-*] )(?![1-9]+\. )/ /g' \
            > /tmp/release-notes.txt

      - name: Download artifact from maven central
        run: |
          # the artifact can take time to show up on maven central so keep retrying
          until curl --silent \
                     --show-error \
                     --fail \
                     -o applicationinsights-agent-$VERSION.jar \
                     https://repo1.maven.org/maven2/com/microsoft/azure/applicationinsights-agent/$VERSION/applicationinsights-agent-$VERSION.jar
          do
            sleep 60
          done

      - id: create-github-release
        name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          then
            opt_ga=" (GA)"
          else
            opt_prerelease="--prerelease"
          fi
          # TODO (trask) remove --draft after the first successful release using this script
          gh release create --target main \
                            --title "Version $VERSION$opt_ga" \
                            --notes-file /tmp/release-notes.txt \
                            $opt_prerelease \
                            --draft \
                            $VERSION \
                            applicationinsights-agent-$VERSION.jar

          echo "::set-output name=version::$VERSION"

  create-docs-pull-request:
    needs: release
    uses: ./.github/workflows/reusable-create-docs-pull-request.yml
    with:
      version: ${{ needs.release.outputs.version }}
    secrets:
      AARON_MAXWELL_TOKEN: ${{ secrets.AARON_MAXWELL_TOKEN }}

  bump-version:
    runs-on: ubuntu-latest
    needs:
      - release
    steps:
      - uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          version=$(.github/scripts/get-version.sh)
          if [[ $version =~ ^([0-9]+\.[0-9]+)\.([0-9]+)$ ]]; then
            major_minor="${BASH_REMATCH[1]}"
            patch="${BASH_REMATCH[2]}"
          else
            echo "unexpected version: $version"
            exit 1
          fi
          echo "NEXT_VERSION=$major_minor.$((patch + 1))" >> $GITHUB_ENV

      - name: Update version
        run: .github/scripts/update-version.sh $NEXT_VERSION

      - name: Create pull request against main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          message="Update version to $NEXT_VERSION"
          body="Update version to \`$NEXT_VERSION\`."
          branch="automation/update-version-to-${NEXT_VERSION}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git checkout -b "$branch"
          git commit -a -m "$message"
          git push --set-upstream origin HEAD:$branch
          gh pr create --title "$message" \
                       --body "$body"
